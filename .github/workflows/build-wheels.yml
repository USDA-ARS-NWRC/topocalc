name: Build and upload to PyPI

# Build on every branch push, tag push, and pull request change:
# on: [push, pull_request]
# on: [pull-request]
on:
  workflow_run:
    workflows: ["Unittest, flake8, coverage"]
    types: [completed]

jobs:
  build_wheels:
    # needs: unittest
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      matrix:
        os: [ubuntu-20.04] #, macos-10.15]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Build wheels
        uses: joerick/cibuildwheel@v1.10.0
        env:
          CIBW_SOME_OPTION: value
          CIBW_TEST_REQUIRES: nose
          CIBW_TEST_COMMAND: "nosetests -vv --exe topocalc"
          CIBW_BUILD: "cp3*-manylinux_x86_64 cp3*-macosx_x86_64"
          CIBW_SKIP: "?p27* pp* ?p35"
          CIBW_BUILD_VERBOSITY: 3
          CIBW_BEFORE_BUILD: "pip install -r requirements.txt"

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    # needs: unittest
    name: Build source distribution
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: Build sdist
        run: python setup.py sdist --formats=gztar

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          # To test: repository_url: https://test.pypi.org/legacy/